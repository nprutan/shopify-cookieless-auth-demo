import React from 'react';
import { ThemeConfig } from '../../utilities/theme';
declare type OriginalColorScheme = Required<ThemeConfig['colorScheme']>;
declare type Inverse = 'inverse';
export declare type InversableColorScheme = OriginalColorScheme | Inverse;
declare type Discard<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
interface ThemeProviderThemeConfig extends Discard<ThemeConfig, 'colorScheme'> {
    colorScheme?: InversableColorScheme;
}
interface ThemeProviderProps {
    /** Custom logos and colors provided to select components */
    theme: ThemeProviderThemeConfig;
    /**
     * By default, Polaris avoids re-declaring custom properties within the same React tree
     * This prop ensures that the CSS custom properties are always rendered. This is useful
     * for components such as portals that render outside of the root DOM node
     */
    alwaysRenderCustomProperties?: boolean;
    /** The content to display */
    children?: React.ReactNode;
}
export declare function ThemeProvider({ theme: themeConfig, alwaysRenderCustomProperties, children, }: ThemeProviderProps): JSX.Element;
export {};
